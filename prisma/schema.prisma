// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum AuthProvider {
    LOCAL
    GOOGLE
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    image         String?
    authProvider  AuthProvider?
    // For LOCAL accounts
    passwordHash  String?
    accounts      Account[]
    sessions      Session[]
    bases         Base[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Airtable-like domain models
model Base {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    owner     User     @relation(fields: [ownerId], references: [id])
    ownerId   String

    tables Table[]

    @@index([ownerId])
}

model Table {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    base      Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
    baseId    String

    columns Column[]
    records Record[]

    @@index([baseId])
}

enum ColumnType {
    TEXT
    NUMBER
}

model Column {
    id        String     @id @default(cuid())
    name      String
    type      ColumnType @default(TEXT)
    order     Int        @default(0)
    table     Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId   String

    @@index([tableId])
}

model Record {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId   String
    // store row data as JSON keyed by column ids
    data      Json

    @@index([tableId])
}
